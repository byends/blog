(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{170:function(t,s,a){t.exports=a.p+"assets/img/php_delay_queue_5.9abe524b.jpg"},171:function(t,s,a){t.exports=a.p+"assets/img/php_delay_queue_4.19848872.jpg"},172:function(t,s,a){t.exports=a.p+"assets/img/php_delay_queue_3.9038e63a.jpg"},173:function(t,s,a){t.exports=a.p+"assets/img/php_delay_queue_2.6da5e828.jpg"},174:function(t,s,a){t.exports=a.p+"assets/img/php_delay_queue_1.4e90eb1d.jpg"},179:function(t,s,a){"use strict";a.r(s);var n=[function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"延迟消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#延迟消息","aria-hidden":"true"}},[this._v("#")]),this._v(" 延迟消息")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用场景")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("人为的控制，比如订单系统里，用户下单后规定，30分钟内没有支付，则自动取消该订单。")]),s("li",[this._v("程序处理比较耗时，比如发邮件，当邮件内容比较大、收件人多或者网络不好等，都有可能导致比较耗时，无法立即返回发送状态。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"初步的解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初步的解决方案","aria-hidden":"true"}},[this._v("#")]),this._v(" 初步的解决方案")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("使用定时任务每分钟执行一次PHP脚本；")]),s("li",[this._v("该脚本根据当前时间去查询数据表，把符合条件的记录（即时间已到的记录）查出来发送即可。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"新的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新的问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 新的问题")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一、由于PHP无法实现定时器功能，什么时候启动PHP进程合适？是使用长驻的PHP进程还是使用定时任务每分种查询一次队列？"),s("br"),this._v("\n二、启动多少PHP进程合适？"),s("br"),this._v("\n三、如果一条消息因PHP进程意外退出导致没有发送成功，如何回滚？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("要求可以在添加任务时任意指定延迟时间触发任务。比如精确到 30 秒种以后，或者几分钟、几小时、几天以后；")]),s("li",[this._v("这种任务会出现比较多，有些消息重要且时效性要求高。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("这个时候，单单使用 Crontab 定时任务已经无法满足需求，需要寻找更好的解决方案。既然想到了消息队列，那么，我们是否可以从这方面切入，找到一个可以实现定时器功能的消息队列，取代 Crontab 这种无法精确到秒的定时任务机制？")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"常见的两种消息队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的两种消息队列","aria-hidden":"true"}},[this._v("#")]),this._v(" 常见的两种消息队列")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("Redis，原生不支持延迟消息队列，可以通过设置过期时间，定时去队列里捞过期的消息，但是存在过期消息被回收的风险。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"更好的解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更好的解决方案","aria-hidden":"true"}},[this._v("#")]),this._v(" 更好的解决方案")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上两种中间件都没有集成我们最需要的定时器，而PHP这方面确实比较弱，没有办法去实现一个友好的定时器。那业界有没有其它的解决办法呢？"),s("br"),this._v("\n有的，那就是 Beanstalkd，轻量级消息中间件，原生支持延迟消息队列，延迟时间精确到秒，绝对是PHP实现延迟消息队列的最佳CP。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(174),alt:"测试对比"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("READY：需要立即处理的任务，当延时 (DELAYED) 任务到期后会自动成为当前任务；")]),s("li",[this._v("DELAYED： 延迟执行的任务, 当消费者处理任务后， 可以用将消息再次放回 DELAYED 队列延迟执行；")]),s("li",[this._v("RESERVED：已经被消费者获取, 正在执行的任务。Beanstalkd 负责检查任务是否在 TTR(time-to-run) 内完成；")]),s("li",[this._v("BURIED：保留的任务: 任务不会被执行，也不会消失，除非有人把它 “踢” 回队列；")]),s("li",[this._v("DELETED：消息被彻底删除。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(173),alt:"状态流转"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(172),alt:"状态流转"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"任务优先级-priority"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务优先级-priority","aria-hidden":"true"}},[this._v("#")]),this._v(" 任务优先级 (priority):")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"延时任务-delay"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#延时任务-delay","aria-hidden":"true"}},[this._v("#")]),this._v(" 延时任务 (delay):")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("生产者发布任务时指定延时；")]),s("li",[this._v("当任务处理完毕后, 消费者再次将任务放入队列延时执行 ("),s("code",[this._v("RELEASE with <delay>")]),this._v(")。这种机制可以实现分布式的 "),s("code",[this._v("java.util.Timer")]),this._v("，这种分布式定时任务的优势是：如果某个消费者节点故障，任务超时重发 (time-to-run) 能够保证任务转移到另外的节点执行。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"任务超时重发-time-to-run"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务超时重发-time-to-run","aria-hidden":"true"}},[this._v("#")]),this._v(" 任务超时重发 (time-to-run):")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"任务预留-buried"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务预留-buried","aria-hidden":"true"}},[this._v("#")]),this._v(" 任务预留 (buried):")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果任务因为某些原因无法执行，消费者可以把任务置为 buried 状态让 Beanstalkd 保留这些任务。管理员可以通过 peek buried 命令查询被保留的任务，并且进行人工干预。简单的, "),s("code",[this._v("kick <n>")]),this._v(" 能够一次性把 n 条被保留的任务踢回队列。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-php line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("producer")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token variable"}},[t._v("$this")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token property"}},[t._v("beanstalkd")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token function"}},[t._v("useTube")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'default'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token variable"}},[t._v("$n")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$n")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token variable"}},[t._v("$delay")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mt_rand")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token variable"}},[t._v("$this")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token property"}},[t._v("beanstalkd")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token function"}},[t._v("put")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// priority.")]),t._v("\n            "),a("span",{attrs:{class:"token variable"}},[t._v("$delay")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("//  delay. 秒数")]),t._v("\n            "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// run time")]),t._v("\n            "),a("span",{attrs:{class:"token double-quoted-string string"}},[t._v('"beanstalkd '),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token variable"}},[t._v("$n")])]),t._v(" delay "),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token variable"}},[t._v("$delay")])]),t._v('"')]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// The job's body.")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token variable"}},[t._v("$n")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-php line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("consumer")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token variable"}},[t._v("$this")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token property"}},[t._v("beanstalkd")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token function"}},[t._v("watch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'default'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token variable"}},[t._v("$limit")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'start consumer'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("chr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$limit")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("// reserve 会阻塞进程，适当设置超时时间，比如 5 秒超时后进入下一次等待")]),t._v("\n            "),a("span",{attrs:{class:"token variable"}},[t._v("$job")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$this")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token property"}},[t._v("beanstalkd")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token function"}},[t._v("reserve")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n            "),a("span",{attrs:{class:"token function"}},[t._v("var_dump")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$job")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$job")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("//$jobStats = $this->beanstalkd->statsJob($job['id']);")]),t._v("\n                "),a("span",{attrs:{class:"token variable"}},[t._v("$this")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token property"}},[t._v("beanstalkd")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token function"}},[t._v("delete")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$job")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{attrs:{class:"token function"}},[t._v("sleep")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("// if ($jobStats['reserves'] > 8) {")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("//     $this->beanstalkd->bury($jobStats['id'], $jobStats['pri']);")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n                "),a("span",{attrs:{class:"token function"}},[t._v("cilog")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$job")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("chr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$limit")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("chr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{attrs:{class:"token variable"}},[t._v("$limit")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'end'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("chr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"那为什么是阻塞进程呢？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#那为什么是阻塞进程呢？","aria-hidden":"true"}},[this._v("#")]),this._v(" 那为什么是阻塞进程呢？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这是因为连接 Beanstalkd 服务端的客户端是用 "),s("code",[this._v("fsockopen/pfsockopen")]),this._v(" 去连接通信的，默认情况下采用阻塞模式开启套接字连接，发送请求指令后将阻塞程序以等待响应。另外一个原因，这也是业务的需要，我们总是希望有一个进程去监听服务端给我们返回的消息，以便拿到消息后进行处理，然后进入下一次等待，而不是执行一次就退出，或者说在服务端没有返回消息时我们的消息处理程序还在不断的循环执行，浪费资源。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_1、一个消息执行超时了我们应该如何处理（包括消息发送失败或php进程意外退出的情况）？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、一个消息执行超时了我们应该如何处理（包括消息发送失败或php进程意外退出的情况）？","aria-hidden":"true"}},[this._v("#")]),this._v(" 1、一个消息执行超时了我们应该如何处理（包括消息发送失败或PHP进程意外退出的情况）？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(171),alt:"job 包含的字段"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_2、一个消费者进程每次启动后执行多少条消息合适？或者说一个消费者进程持续运行多长时间比较合适？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、一个消费者进程每次启动后执行多少条消息合适？或者说一个消费者进程持续运行多长时间比较合适？","aria-hidden":"true"}},[this._v("#")]),this._v(" 2、一个消费者进程每次启动后执行多少条消息合适？或者说一个消费者进程持续运行多长时间比较合适？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(170),alt:"消息状态架构图"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("把不同类型的消息处理进程分组")]),s("li",[this._v("方便的设定启动进程的数量")]),s("li",[this._v("自动维护每个进程")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"附两个术语的解释："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#附两个术语的解释：","aria-hidden":"true"}},[this._v("#")]),this._v(" 附两个术语的解释：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TTR是如何工作的？")]),s("p",[this._v('TTR仅用于一个job变成reserved状态的时候。在那个时候，一个计时器（在job状态中称为“time-left”）开始从job的TTR开始倒计时。\n如果计时器变成0，这个job被放回ready队列。\n计时器到期之前，如果这个job变成"buried"、“deleted”或"released"状态，计时器将停止并退出。\n计时器变成0之前，如果这个工作变成"touched"，计时器从TTR重新开始倒计时。\n（非"reserved"状态的job仍然包含一个"time-left"条目，但它的值是无意义的。）')])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("DEADLINE_SOON是什么意思?")]),s("p",[this._v("DEADLINE_SOON是一个reserve命令的响应，它表明一个“reserved”状态的job的最后期限（deadline）马上要到期（目前的安全边际大约是1秒）。\n如果你执行reserve命令时，频繁地收到DEADLINE_SOON错误，你可能应该考虑对你的job增加TTR，因为它表示你没有安时完成你的job。这也可能是在完成了你的job，却没有删除它们。")])])}],e=a(0),r=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("p",[t._v("注：本文首发于"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/32149460",target:"_blank",rel:"noopener noreferrer"}},[t._v("知乎"),a("OutboundLink")],1)]),t._m(0),a("p",[t._v("大白话来说，就是实现一种计划任务的定时机制，希望在设定的时间到达后才触发发送消息。")]),t._m(1),a("p",[t._v("举两个使用场景：")]),t._m(2),t._m(3),a("p",[t._v("Linux 里有 Crontab 定时任务，Windows 也有计划任务。")]),t._m(4),a("p",[t._v("那么，这里要思考的问题是，如果每条记录因业务场景不同可能会比较耗时，如果不做处理则会阻塞后面的消息送达，还有可能因为脚本中断导致后续消息记录无法发送，轻则影响后续消息的发送时间，重则导致大量消息记录积压。那么，此时需要做进一步处理，把查出来的消息记录扔进 Redis 队列，需要另起PHP进程去轮询 Redis 队列，取出消息来发送。")]),t._m(5),t._m(6),a("p",[t._v("其实，如果没有严格时效要求，我们可以这样。可以想像，最坏的情况是消息延迟2分钟（即从数据表里查出来最多延迟1分钟，然后再从Redis队列拿出来最多延迟1分钟）发送，如此的话使用定时任务每分种启动PHP进程来查询Redis 队列即可。当然，这并不是最好的方式。")]),a("p",[t._v("带着上面的问题，我们再来看看需求方更细化的需求：")]),t._m(7),t._m(8),t._m(9),a("p",[t._v("其实说到消息队列，可能大家都会想到比较常见的 Rabbitmq、Redis。好，来看看是否是我们想要的。")]),a("ul",[a("li",[a("p",[t._v("Rabbitmq，原生不支持消息延迟，需要通过其它方式模拟。比如，使用 Time To Live (TTL)  + Dead Letter Exchanges(DLX)。即进入这种队列的消息在一定时间内超时会进入 exchange，然后再使用定时器，定时从 exchange 捞出来。 也可以使用插件 "),a("a",{attrs:{href:"https://github.com/rabbitmq/rabbitmq-delayed-message-exchange",target:"_blank",rel:"noopener noreferrer"}},[t._v("rabbitmq-delayed-message-exchange"),a("OutboundLink")],1),t._v(" 来实现。遗憾的是，我们最需要的是定时器，因为PHP很难去实现一个定时触发器。")])]),t._m(10)]),t._m(11),t._m(12),a("p",[t._v("Beanstalkd，一个高性能、轻量级的分布式内存队列系统，最初设计的目的是想通过后台异步执行耗时的任务来降低高容量Web应用系统的页面访问延迟，支持过有9.5 million用户的Facebook Causes应用。其内部实现采用 libevent，服务器-客户端之间类似 memcached 轻量级 tcp 通讯协议，因此有很高的性能，这里有个外国人做的测试对比：")]),t._m(13),a("p",[t._v("Beanstalkd 利用任务（job） 代替消息（message） 的概念，每一个任务都有以下几种状态：")]),t._m(14),a("p",[t._v("从生产者 - 消费者的角度去看状态流转：")]),t._m(15),a("p",[t._v("从开发者开发的角度去看状态流转：")]),t._m(16),a("p",[t._v("Beanstalkd 最大特点是基于 管道（tube）和 任务 （job）的工作队列（work-queue），支持以下特性：")]),t._m(17),a("p",[t._v("任务 (job) 可以有 0~2^32 个优先级，0 代表最高优先级。 beanstalkd 采用最大最小堆 (Min-max heap) 处理任务优先级排序， 任何时刻调用 reserve 命令的消费者总是能拿到当前优先级最高的任务， 时间复杂度为 O(logn)。")]),t._m(18),a("p",[t._v("有两种方式可以延时执行任务 (job)：")]),t._m(19),t._m(20),a("p",[t._v("Beanstalkd 把任务返回给消费者以后：消费者必须在预设的 TTR (time-to-run) 时间内发送 delete / release/ bury 改变任务状态，否则 Beanstalkd 会认为消息处理失败，然后把任务交给另外的消费者节点执行。如果消费者预计在 TTR (time-to-run) 时间内无法完成任务，也可以发送 touch 命令，它的作用是让 Beanstalkd 从系统时间重新计算 TTR (time-to-run)。")]),t._m(21),t._m(22),a("p",[t._v("下面来看看如何与 PHP 结合使用，解决前面提到的问题。")]),a("p",[t._v("这里推荐个简洁的 PHP 客户端库："),a("a",{attrs:{href:"https://github.com/davidpersson/beanstalk",target:"_blank",rel:"noopener noreferrer"}},[t._v("davidpersson/beanstalk"),a("OutboundLink")],1),a("br"),t._v("\n我们需要一个生产者和一个消费者，把消息扔进消息队列即为生产者，取出消息来处理即为消费者。")]),a("p",[t._v("一个简易的生产者：")]),t._m(23),a("p",[t._v("一个简易的消费者：")]),t._m(24),a("p",[t._v("从代码中可以看到，其实消费者进程是一个阻塞进程，使用一个循环去监听行等待 beanstalkd 返回消息，拿到消息后再进程处理。")]),t._m(25),t._m(26),a("p",[t._v("在实际应用中，可能会产生各种类型的消息，消费者也会存在多个进程。所以我们还要考虑更为复杂的情况，比如：")]),t._m(27),a("p",[t._v("由于Beanstalk的运行机制，一个job，即一条消息取出后如果不手动删掉或置为其它状态，则该消息将重回消息队列，由其它消费者程序处理。所以，为了避免一条消息重复处理，取出一条消息后，需要判断是否已经处理过，以及处理完一条消息后应该删除或置为其它状态。")]),a("p",[t._v("Beanstalkd 的每个 job 都有记录被消费者读取的次数，以及超时的次数，更多信息如下图：")]),t._m(28),t._m(29),a("p",[t._v("这里主要是为了PHP进程能在执行一段时间后自动退出，因为PHP不适合做一个常驻进程，PHP的设计目的也并非是后台服务，所以，更好的办法是在跑了一段时间后自动退出，新起一个进程。我们可以通过设置执行消息的次数以及持续运行的时间来让进程自动退出。你可能会说因为阻塞所以根本没法实现让程序在执行过程中判断次数和运行时间。放心，Beanstalkd 可以在监听服务端的时候设置超时间，即使用 reserve with timeout 来预订 job，设定后，在监听超时后将会进入下一次循环。")]),a("p",[t._v("另外，Beanstalkd 也可以开启binlog，如果遇到 Benstalkd 进程因为某些原因挂了，或者机器需要重启时，Beanstalkd 都能轻松地从 binlog 恢复这些消息。然而，总有一些消息是比较重要的，我们需要详细记录这个消息的发送情况，这就需要我们把消息落地，记录到数据库中，下图是一个记录消息状态的架构图。")]),t._m(30),a("p",[t._v("最后，我们需要根据业务量增加或减少消息处理进程。为了更好地管理这些处理进程，推荐使用 supervisor 进程管理器，可以轻松地解决下面几点：")]),t._m(31),t._m(32),t._m(33),t._m(34),a("p",[t._v("参考资料："),a("br"),a("a",{attrs:{href:"https://github.com/kr/beanstalkd/blob/master/doc/protocol.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Beanstalkd中文协议"),a("OutboundLink")],1),a("br"),a("a",{attrs:{href:"http://in355hz.iteye.com/blog/1395727",target:"_blank",rel:"noopener noreferrer"}},[t._v("Beanstalkd 介绍"),a("OutboundLink")],1),a("br"),a("a",{attrs:{href:"http://blog.csdn.net/u014308482/article/details/53036770",target:"_blank",rel:"noopener noreferrer"}},[t._v("rabbitmq 实现延迟队列的两种方式"),a("OutboundLink")],1)])])},n,!1,null,null,null);s.default=r.exports}}]);